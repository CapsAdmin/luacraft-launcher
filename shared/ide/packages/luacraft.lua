local interpreter = {
  name = "Luacraft",
  description = "Luacraft API",
  api = {"baselib", "luacraft"},
  hasdebugger = false,
  skipcompile = false,
}

local dirs = {
	"library/",
	"library/client/",
	"library/server/",
	"meta/",
	"meta/client/",
	"meta/server/",
}

local api = {}
api["continue"] = {type = "keyword"}
api.childs = {}
local mini_wiki = "--[[\nthis file is autogenerated when the ide is launched\n\n"

for _, dir in ipairs(dirs) do
	for _, path in pairs(FileSysGetRecursive(ide:GetRootPath() .. "../minecraft/src/main/java/com/luacraft/" .. dir, false, "*.java")) do
		local str = io.open(path, "rb"):read("*a")
		local lines = {}
		for l in str:gmatch("(.-)\n") do
			table.insert(lines, l)
		end
		for chunk in str:gmatch("* @author.- @return.-\n") do
			chunk = chunk:gsub("\r", "")
			local library = chunk:match("@library (.-)\n") or "Globals"
			local type = dir:find("meta") and "class" or "lib"
			local class = path:match(".+/Lua(.-)%.java")
			local func_name = chunk:match("@function (.-)\n")
			local description = chunk:match("@info (.-)\n")
			local arg_line = chunk:match("@arguments (.-)\n") or ""
			local ret_line = chunk:match("@return (.+)\n") or ""

			if type == "class" then
				library = class
			end

			if arg_line == "nil" or not arg_line then
				arg_line = ""
			else
				arg_line = arg_line:gsub("%[%[([%a_]-)%]%]:([%a_]+)", "%2: %1"):lower()
			end

			if ret_line == "nil" or not ret_line then
				ret_line = ""
			else
				ret_line = ret_line:gsub("%[%[([%a_]-)%]%]:([%a_]+)", "%2: %1"):lower()
			end

			local tbl = {
				description = description,
				args = arg_line,
				returns = ret_line,
				type = "function",
			}

			if library == "Globals" then
				api.childs[func_name] = tbl
			else
				if not api[library] then
					api[library] = {
						type = type,
						childs = {},
					}
				end
				api[library].childs[func_name] = tbl
			end

			do
				local line = 1
				for i, v in ipairs(lines) do
					if v:find("@function " .. func_name, nil, true) then
						break
					end
					line = line + 1
				end

				local lib

				if library == "Globals" then
					lib = ""
				else
					lib = library .. (type == "class" and ":" or ".")
				end

				local source_link = "(macro:inline(ide:LoadFile('"..path.."')ide:GetEditor():GotoLine("..line..")))"
				local name = lib .. func_name
				mini_wiki = mini_wiki .. "[" .. name .. "]" .. source_link .. "\n"
				if description then mini_wiki = mini_wiki .. "\tdescription: " .. description .. "\n" end
				mini_wiki = mini_wiki .. "\targuments  : " .. arg_line .. "\n"
				mini_wiki = mini_wiki .. "\treturn type: " .. ret_line .. "\n\n"
			end
		end
	end
end

mini_wiki = mini_wiki .. "]]\n"

local file = io.open(ide:GetRootPath() .. "../../shared/lua/reference.lua", "wb")
file:write(mini_wiki)
file:close()

return {
  name = "Luacraft",
  description = "API description for auto-complete and tooltip support",
  author = "CapsAdmin",
  version = 0,

  onRegister = function(self)
    ide:AddAPI("lua", "luacraft", api)
    ide:AddInterpreter("luacraft", interpreter)
  end,

  onUnRegister = function(self)
    ide:RemoveAPI("lua", "luacraft")
    ide:RemoveInterpreter("luacraft")
  end,
}
